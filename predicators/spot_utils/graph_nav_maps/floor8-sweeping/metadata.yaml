# Additional info associated with the map.
---
spot-home-pose:
  x: 1.832
  y: -0.5
  angle: -1.45769
april-tag-offsets: []
# Allowed regions. Each region is defined by a set of points
# that form the boundary of the region. We will check
# whether a pose is within the region by checking whether the
# robot will be within the convex hull of these boundary
# points.
allowed-regions:
  main-room:
    - [0.25, -2.25]
    - [0.25, 1.0]
    - [4.0, 1.0]
    - [4.0, -2.25]
# Known immovable objects. Assuming default rotations.
known-immovable-objects:
  floor:
    x: 1.5
    y: 0.5
    z: -0.5
  black_table:
    x: 2.3
    y: -2.0
    z: -0.32
  shelf1:
    x: 4.0
    y: -2.0
    z: 0.05
    yaw: -0.7
# Static object features, including the shapes and sizes of known objects.
static-object-features:
  floor:
    shape: 1
    height: 0.0001
    length: 10000000  # effectively infinite
    width: 10000000
    flat_top_surface: 1
  train_toy:
    shape: 2
    height: 0.05
    length: 0.065
    width: 0.065
    placeable: 1
    is_sweeper: 0
  football:
    shape: 2
    height: 0.05
    length: 0.065
    width: 0.065
    placeable: 1
    is_sweeper: 0
  brush:
    shape: 1
    height: 0.05
    length: 0.5
    width: 0.05
    placeable: 1
    is_sweeper: 1
  bucket:
    shape: 1
    height: 0.05
    width: 0.3
    length: 0.4
    placeable: 1
    is_sweeper: 0
    # Important for TopAbove that the bucket appears to always be on the ground
    z: -0.45
    # Rotation can't be detected.
    qw: 1
    qx: 0
    qy: 0
    qz: 0
  chair:
    shape: 2
    height: 0.3
    length: 0.5
    width: 0.5
    placeable: 0  # false, can't be placed
    is_sweeper: 0
    z: -0.1  # the chair can move in the x/y plane only
  black_table:
    shape: 1
    height: 0.37
    length: 0.37
    width: 0.37
    flat_top_surface: 1
  shelf1:
    shape: 1
    height: 0.1
    length: 0.8
    width: 0.7
    flat_top_surface: 0
# This should be calculable, but I'm lazy. These values represent the SE2 pose
# (in the table frame) for the robot before placing the container.
prepare_container_relative_xy:
  dx: -0.37
  dy: 0.7
  angle: -1.5707  # - pi / 2
# Helpful for static objects that are up against a wall, for example.
approach_angle_bounds:
  black_table: [1.570, 1.575]  # about pi / 2
  # Only drag the chair from behind it, approximately.
  chair: [1.25, 1.75]  # about pi / 2
