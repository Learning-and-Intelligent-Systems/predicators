"""Test cases for the exploit bilevel planning explorer class."""

import pytest

from predicators.src import utils
from predicators.src.envs.cover import CoverEnv
from predicators.src.explorers import create_explorer
from predicators.src.ground_truth_nsrts import get_gt_nsrts
from predicators.src.option_model import _OracleOptionModel


def test_exploit_bilevel_planning_explorer():
    """Tests for ExploitBilevelPlanningExplorer class."""
    utils.reset_config({
        "env": "cover",
        "explorer": "exploit_planning",
    })
    env = CoverEnv()
    nsrts = get_gt_nsrts(env.predicates, env.options)
    option_model = _OracleOptionModel(env)
    train_tasks = env.get_train_tasks()
    explorer = create_explorer("exploit_planning", env.predicates, env.options,
                               env.types, env.action_space, train_tasks, nsrts,
                               option_model)
    task_idx = 0
    task = train_tasks[task_idx]
    policy, termination_function = explorer.get_exploration_strategy(
        task_idx, 500)
    traj, _ = utils.run_policy(
        policy,
        env,
        "train",
        task_idx,
        termination_function,
        max_num_steps=1000,
    )
    final_state = traj.states[-1]
    assert termination_function(final_state)
    assert task.goal_holds(final_state)
    # Test timeout.
    with pytest.raises(utils.RequestActPolicyFailure) as e:
        explorer.get_exploration_strategy(task_idx, -1)
    assert "Planning timed out" in str(e)
